@page "/calendarslist"
@rendermode InteractiveServer

@using MudBlazor

@inject ICalendarService CalendarService
@inject IUserService UserService
@inject EmailService EmailService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject Ezac.Roster.Domain.Interfaces.Services.IExportService ExportService


<h3>Alle kalenders</h3>

<button class="btn btn-primary" @onclick="CreateCalendar">Maak een nieuwe kalender</button>

<ConfirmDeletePopUp @ref="DeletePopUp" deleteCalendar="@DeleteCalendar" />

@if (calendars != null)
{
    <table class="table table-hover mt-4">
        <thead class="thead-light">
            <tr>
                <th>Naam</th>
                <th>Jaar</th>
                <th>Acties</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var calendar in calendars)
            {
                <tr>
                    <td>@calendar.Name</td>
                    <td>@calendar.Start.ToString("dd/MM/yyyy") tot @calendar.End.ToString("dd/MM/yyyy")</td>
                    <td>
                        <button class="btn btn-info btn-sm" @onclick="() => OverviewCalendar(calendar.Id)">Overzicht</button>
                        <button class="btn btn-warning btn-sm" @onclick="() => UpdateCalendar(calendar.Id)">bewerken</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => ShowDeletePopUp(calendar.Id)">Verwijderen</button>
                        <button class="btn btn-success btn-sm" @onclick="() => GenerateUniqueLink(calendar.Id)">Link Versturen</button>
                        <MudButton Variant="Variant.Filled" Color="Color.Info" Size="Size.Small" Disabled="@isLoading"
                                   @onclick="@(async () => await DownloadCalendar(calendar.Id))">
                            @if (isLoading)
                            {
                                <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
                                <span class="ml-2">Bezig met downloaden...</span>
                            }
                            else
                            {
                                <span>Download Excel</span>
                            }
                        </MudButton>
                        <button class="btn btn-info btn-sm" @onclick="() => OverviewCalendar(calendar.Id)">Overzicht</button>
                        <button class="btn btn-warning btn-sm" @onclick="() => UpdateCalendar(calendar.Id)">Bewerken</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => ShowDeletePopUp(calendar.Id)">Verwijderen</button>
                        <button class="btn btn-info btn-sm" @onclick="() => GenerateUniqueLink(calendar.Id)">Link Versturen</button>
                        <button class="btn btn-info btn-sm" @onclick="() => ImportUsers(calendar.Id)">Leden Importeren</button>
                        <button class="btn btn-info btn-sm" @onclick="() => MemberOverview(calendar.Id)">Leden Kalender</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

else
{
    <p>Geen kalenders gevonden.</p>
}

<script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) => {
        const arrayBuffer = await contentStreamReference.arrayBuffer();
        const blob = new Blob([arrayBuffer]);
        const url = URL.createObjectURL(blob);
        const anchorElement = document.createElement('a');
        anchorElement.href = url;
        anchorElement.download = fileName ?? '';
        anchorElement.click();
        anchorElement.remove();
        URL.revokeObjectURL(url);
    }
</script>


@code {
    private List<ApplicationCalendar> calendars;

    private ConfirmDeletePopUp DeletePopUp;

    private bool isLoading = false;

    [Parameter]
    public string calendarId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var calendarResult = await CalendarService.GetAllAsync();

        if (calendarResult.IsSucces)
        {
            calendars = calendarResult.Value.ToList();
        }
    }

    private void UpdateCalendar(Guid calendarId)
    {
        Navigation.NavigateTo($"calendarupdate/{calendarId}");
    }

    private async Task ShowDeletePopUp(Guid calendarId)
    {
        await DeletePopUp.Show(calendarId);
    }

    private async Task DeleteCalendar(Guid calendarId)
    {
        await CalendarService.DeleteAsync(calendarId);
        var calendarResult = await CalendarService.GetAllAsync();

        if (calendarResult.IsSucces)
        {
            calendars = calendarResult.Value.ToList();
        }
        StateHasChanged();
    }

    private void CreateCalendar()
    {
        Navigation.NavigateTo("calendar-creator");
    }

    private void OverviewCalendar(Guid calendarId)
    {
        Navigation.NavigateTo($"calendar/{calendarId}");
    }
    private void  GoToCalendarOverviewStatistics(Guid calendarId)
    {
        Navigation.NavigateTo($"calendarstatistics/{calendarId}");
    }

    private void ImportUsers(Guid calendarId)
    {
        Navigation.NavigateTo($"/import/{calendarId}");
    }

    private async Task GenerateUniqueLink(Guid calendarId)
    {
        var baseUrl = "https://localhost:44375/user";
        var usersResult = await UserService.GetAllAsync();

        if (usersResult.IsSucces)
        {
            foreach (var user in usersResult.Value)
            {
                var uniqueLink = $"{baseUrl}/{calendarId}/{user.Id}";
                var subject = "Kalender link";
                var body = $"Hallo {user.Name},<br/><br/>Hier is uw unieke kalenderlink: <a href=\"{uniqueLink}\">Klik hier</a>. <br/><br/> De Zweefvliegers";
                await EmailService.SendEmailAsync("goethalsdiego@gmail.com", subject, body);
            }
        }
    }

    private async Task DownloadCalendar(Guid calendarId)
    {
        isLoading = true;

        var calendar = calendars.FirstOrDefault(c => c.Id == calendarId);
        if (calendar == null)
        {
            return;
        }

        var startMonthYear = $"{calendar.Start.Month}/{calendar.Start.Year}";
        var endMonthYear = $"{calendar.End.Month}/{calendar.End.Year}";

        var stream = await ExportService.ExportCalendarToExcel(calendarId);
        var fileName = $"kalender voor {startMonthYear} tot {endMonthYear}.xlsx";
        stream.Position = 0;

        using var streamRef = new DotNetStreamReference(stream: stream);
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);

        isLoading = false;
    }
    }

    private void MemberOverview(Guid calendarId)
	{
		Navigation.NavigateTo($"members/{calendarId}");
	}
}
