@page "/calendar-creator"
@rendermode InteractiveServer

@using Ezac.Roster.Domain.Interfaces.Services
@using Ezac.Roster.Domain.Entities
@using Ezac.Roster.Web.Components.Components
@using Ezac.Roster.Domain.Services.Models

@inject ICalendarService CalendarService
@inject NavigationManager NavigationManager

<div id="calendar-creator">
    <CalendarForm Calendar="_calendar" FormHandler="CreateCalendar" UpdateStartDate="UpdateStartDate" UpdateEndDate="UpdateEndDate" AddExtraDay="AddExtraDay" />
    <div>
        <h3>Aangeduide data</h3>
        <ul id="date-list">
            @foreach (var day in _calendar.Days)
            {
                if (day.IsOpen)
                {
                    <DateItem day="@day" RemoveDay="@RemoveClosedDay" />
                }
            }
        </ul>
    </div>
</div>

@code {
    private ApplicationCalendar _calendar { get; set; }

    protected override void OnInitialized()
    {
        _calendar = new ApplicationCalendar()
        {
            Start = DateTime.Now,
            End = DateTime.Now,
            Days = new List<Day>()
        };
        SetDays();
    }

    private void SetDays()
    {
        _calendar.Days.Clear();
        var allDays = Enumerable.Range(0, (_calendar.End - _calendar.Start).Days + 1)
                                .Select(offset => _calendar.Start.AddDays(offset));
        foreach (var day in allDays)
        {
            _calendar.Days.Add(new Day()
            {
                Id = Guid.NewGuid(),
                Date = day,
                IsOpen = day.DayOfWeek == DayOfWeek.Saturday || day.DayOfWeek == DayOfWeek.Sunday,
                Name = day.DayOfWeek.ToString(),
                CalendarId = _calendar.Id
            });
        }
        _calendar.Days = _calendar.Days.OrderBy(d => d.Date).ToList();
    }

    private void UpdateStartDate(ChangeEventArgs e)
    {
        _calendar.Start = DateTime.Parse(e.Value.ToString());
        SetDays();
    }

    private void UpdateEndDate(ChangeEventArgs e)
    {
        _calendar.End = DateTime.Parse(e.Value.ToString());
        SetDays();
    }

    private void RemoveClosedDay(Day closedDay)
    {
        var dayToRemove = _calendar.Days.FirstOrDefault(day => day.Equals(closedDay));
        if (dayToRemove != null)
        {
            _calendar.Days.Remove(dayToRemove);
            closedDay.IsOpen = false;
            _calendar.Days.Add(closedDay);
            _calendar.Days = _calendar.Days.OrderBy(d => d.Date).ToList();
            StateHasChanged();
        }
    }

    private void AddExtraDay(DateTime dateToAdd)
    {
        _calendar.Days.Add(new Day()
            {
                Id = Guid.NewGuid(),
                Date = dateToAdd,
                IsOpen = true,
                Name = dateToAdd.DayOfWeek.ToString(),
                CalendarId = _calendar.Id
            });
        _calendar.Days = _calendar.Days.OrderBy(d => d.Date).ToList();
        StateHasChanged();
    }

    private async Task CreateCalendar()
    {
        var calendarCreateRequestModel = new ApplicationCalendarCreateRequestModel()
		{
			Name = _calendar.Name,
			Start = _calendar.Start,
			End = _calendar.End,
			Days = _calendar.Days
		};

        await CalendarService.AddAsync(calendarCreateRequestModel);
        NavigationManager.NavigateTo("calendarslist");
    }
}