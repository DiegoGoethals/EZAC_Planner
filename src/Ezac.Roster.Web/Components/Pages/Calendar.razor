@page "/calendar"
@rendermode InteractiveServer

@using Ezac.Roster.Domain
@using Ezac.Roster.Domain.Entities
@using Ezac.Roster.Infrastructure
@using Ezac.Roster.Domain.Interfaces.Services
@using Ezac.Roster.Domain.Models

@inject ICalendarService CalendarService
@inject IJobService JobService
@inject IDayService DayService
@inject IDayPeriodService DayPeriodService
@inject IPermissionsService PermissionService
@inject IUserService _userService

@if (calendar != null && calendar.Days != null)
{
    <div class="row">
        <div class="col-lg-10">
            <div class="table-responsive">
                <table class="table table-bordered" style="border-color:black">
                    <thead>
                        <tr>
                            <th>Dag/Periode</th>
                            @foreach (var period in periodNames)
                            {
                                <th>@period</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var day in calendar.Days)
                        {
                            <tr>
                                <td @onclick="() => ToggleDay(day)">
                                    <p>
                                        @day.Date.ToString("ddd d/M")
                                    </p>
                                </td>
                                @foreach (var period in day.DayPeriods.OrderBy(dp => dp.Name))
                                {

                                    @if (!day.IsOpen)
                                    {
                                        <td style="background-color:red"></td>
                                    }
                                    else
                                    {
                                        <td @onclick="TogglePopUp" style="background-color:green">
                                            <button @onclick="() => TogglePeriod(day, period)" class="btn btn-primary">
                                                @period.Name
                                            </button>

                                            @foreach (var job in period.Jobs)
                                            {
                                                <div ondragover="event.preventDefault();" draggable="true" @ondrop="(e => HandleDrop(e, job.Id.ToString()))">
                                                    @job.Name
                                                    @if (Dropzones.ContainsKey(job.Id.ToString()))
                                                    {
                                                        if (Dropzones[job.Id.ToString()] != null)
                                                        {
                                                            <p>@Dropzones[job.Id.ToString()].Name</p>
                                                            <button @onclick="() => CancelUserDropZone(job.Id.ToString())" style="background-color:red">X</button>
                                                        }
                                                    }
                                                </div>
                                            }
                                        </td>
                                    }
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        @if (ToggleSchedulerPopUp)
        {
            <div class="col-lg-2">
                <div class="position-fixed" style="top: 200px; right: 20px;">
                    <Ezac.Roster.Web.Components.Components.SchedulerPopUp @rendermode="InteractiveServer"
                                                                          OnGetStaff="(e) => GetStaff(e)"
                                                                          Staff="Staff"
                                                                          OnCancel="CancelPopUp"
                                                                          OnDragged="(user) => HandleDragStart(user)">
                    </Ezac.Roster.Web.Components.Components.SchedulerPopUp>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>Gegevens worden geladen of kalender bevat geen dagen.</p>
}


@code {

    private ApplicationCalendar calendar;
    private List<DayPeriod> dayPeriods;
    private static List<Job> jobs;
    private static List<Permission> permissions;
    private string SelectedMonth;
    private List<string> periodNames = new List<string>();
    private bool ToggleSchedulerPopUp { get; set; }
    private UserListModel draggedMember = null;
    private Dictionary<string, UserListModel> Dropzones = new();
    private List<UserListModel> _users { get; set; } = new List<UserListModel>();
    public List<UserListModel> Staff { get; set; } = new List<UserListModel>();

    private void CancelUserDropZone(string dropzoneId)
    {
        Dropzones[dropzoneId] = null;
    }

    public Task HandleDragStart(UserListModel user)
    {
        draggedMember = user;
        return Task.CompletedTask;
    }


    private async Task HandleDrop(DragEventArgs e, string zone)
    {
        if (draggedMember != null)
        {
            if (!Dropzones.ContainsKey(zone))
            {
                Dropzones[zone] = new UserListModel();
            }

            Dropzones[zone] = draggedMember;
            await InvokeAsync(StateHasChanged);
        }
    }

    

    

    


    protected override async Task OnInitializedAsync()
    {
        // get the calendar
        var calendarResult = await CalendarService.GetAllAsync();

        if (calendarResult.IsSucces)
        {
            calendar = calendarResult.Value.FirstOrDefault();
            calendar.Days = calendar.Days.OrderBy(day => day.Date).ToList();

            await GetUniquePeriodNames();
            //await FillDayperiodsWithJobs();
        }

        var usersResult = await _userService.GetAllAsync();
        if (usersResult.IsSucces)
        {
            _users = usersResult.Value.Select(p => new Ezac.Roster.Domain.Models.UserListModel
            {
                Id = p.Id,
                Name = p.Name,
                Permissions = p.UserPermissions,
                Scaling = p.Scaling,
            }).ToList();
        }

    }

    private IEnumerable<DayPeriod> GetDayPeriodsForDay(Guid dayId)
    {
        // get day periods for the specific day
        return dayPeriods.Where(dp => dp.DayId == dayId);
    }

    private IEnumerable<Job> GetJobsForDayAndPeriod(Day day, DayPeriod period)
    {
        // get jobs for the specific day and period
        return day.DayPeriods
              .Where(dp => dp.Id == period.Id)
              .SelectMany(dp => dp.Jobs);
    }

    private async Task ToggleDay(Day day)
    {
        if (day.IsOpen)
        {
            var toggleResult = await DayService.ToggleAsync(day.Id);
            if (toggleResult.IsSucces)
            {
                StateHasChanged();
            }
        }
        else
        {
            day.IsOpen = !day.IsOpen;
            StateHasChanged();
        }
    }

    private async Task TogglePeriod(Day day, DayPeriod period)
    {
        var dayPeriod = day.DayPeriods.FirstOrDefault(dp => dp.Name == period.Name);
        if (dayPeriod.IsOpen)
        {
            var toggleResult = await DayPeriodService.ToggleAsync(dayPeriod.Id);
            if (toggleResult.IsSucces)
            {
                dayPeriod.IsOpen = !dayPeriod.IsOpen;
                StateHasChanged();
            }
        }
        else
        {
            dayPeriod.IsOpen = !dayPeriod.IsOpen;
            StateHasChanged();
        }
    }

    private IEnumerable<DayPeriod> GetDistinctPeriods(ICollection<Day> days)
    {
        return days.SelectMany(d => d.DayPeriods)
                   .GroupBy(p => p.Id)
                   .Select(g => g.First())
                   .ToList();
    }

    private async Task GetUniquePeriodNames()
    {
        var dayPeriods = await DayPeriodService.GetAllAsync();
        if (dayPeriods.IsSucces)
        {
            periodNames = dayPeriods.Value.Select(p => p.Name).Distinct().OrderBy(name => name).ToList();
        }
    }

    private async Task FillDayperiodsWithJobs()
    {
        foreach (var day in calendar.Days)
        {
            foreach (var period in day.DayPeriods)
            {
                if (period.Name == "A" || period.Name == "B")
                {
                    period.Jobs = new Job[] { new Job { Name = "Lierist" },
                               new Job { Name = "Startofficier" },
                               new Job { Name = "Instructeur" },
                               new Job { Name = "Instructeur (DDI)"} };
                }
                else if (period.Name == "C")
                {
                    period.Jobs = new Job[] { new Job { Name = "Bardienst" } };
                }

            }
        }
    }

    private async Task GetPermissions()
    {
        var permissionsResult = await PermissionService.GetAllAsync();
        if (permissionsResult.IsSucces)
        {
            permissions = permissionsResult.Value.ToList();
        }
    }

}
