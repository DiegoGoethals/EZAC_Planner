@page "/calendar"

@using Ezac.Roster.Domain
@using Ezac.Roster.Domain.Entities
@using Ezac.Roster.Infrastructure
@using Ezac.Roster.Domain.Interfaces.Services

@inject ICalendarService CalendarService
@inject IJobService JobService
@inject IDayService DayService
@inject IDayPeriodService DayPeriodService


<h3>Kalender voor de maand @SelectedMonth</h3>

@if (calendar != null && calendar.Days != null)
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Dag/Periode</th>
                @foreach (var day in calendar.Days)
                {
                    foreach (var period in GetDayPeriodsForDay(day.Id))
                    {
                        <th>@period.Name</th>
                    }
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var day in calendar.Days)
            {
                <tr>
                    <td>@day.Date.ToString("ddd d/M")</td>
                    @foreach (var period in GetDayPeriodsForDay(day.Id))
                    {
                        <td>
                            @foreach (var job in GetJobsForDayAndPeriod(day, period))
                            {
                                <p>@job.Name</p>
                            }
                        </td>
                    }
                </tr>
            }

        </tbody>
    </table>
}
else
{
    <p>Gegevens worden geladen...</p>
}


@code {

    private ApplicationCalendar calendar;
    private List<DayPeriod> dayPeriods;
    private List<Job> jobs;
    private string SelectedMonth;

    private Guid selectedCalendarId;

    protected override async Task OnInitializedAsync()
    {
        // get the calendar
        var calendarResult = await CalendarService.GetByIdAsync(selectedCalendarId);

        if (calendarResult.IsSucces)
        {
            calendar = calendarResult.Value;
            //SelectedMonth = calendar.Month;
        }
    }

    private IEnumerable<DayPeriod> GetDayPeriodsForDay(Guid dayId)
    {
        // get day periods for the specific day
        return dayPeriods.Where(dp => dp.DayId == dayId);
    }

    private IEnumerable<Job> GetJobsForDayAndPeriod(Day day, DayPeriod period)
    {
        // get jobs for the specific day and period
        return day.DayPeriods
              .Where(dp => dp.Id == period.Id)
              .SelectMany(dp => dp.Jobs);
    }
}
