@page "/calendar/{id}"
@rendermode InteractiveServer

@inject ICalendarService CalendarService
@inject IJobService JobService
@inject IDayService DayService
@inject IDayPeriodService DayPeriodService
@inject IPermissionsService PermissionService
@inject IUserService _userService

@if (calendar != null && calendar.Days != null)
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-9">
                <div class="table-responsive">
                    <table class="table table-bordered table-hover" style="border-color:black">
                        <thead>
                            <tr>
                                <th>Dag/Periode</th>
                                @foreach (var period in periodNames)
                                {
                                    <th>@period</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var day in calendar.Days)
                            {
                                @if (day.IsOpen)
                                {
                                    <tr>
                                        <td @onclick="() => ToggleDay(day)">
                                            <p>
                                                @day.Date.ToString("ddd d/M")
                                            </p>
                                        </td>
                                        @foreach (var period in day.DayPeriods.OrderBy(dp => dp.Name))
                                        {
                                            @if (!period.IsOpen)
                                            {
                                                <td style="background-color:tomato" @onclick="() => TogglePopUp(day, period)">
                                                    <button @onclick="() => TogglePeriod(day, period)" class="btn btn-primary">
                                                        @period.Name
                                                    </button>
                                                </td>
                                            }
                                            else
                                            {
                                                <td @onclick="() => TogglePopUp(day, period)" style="background-color:lightgreen">
                                                    <div class="mb-2">
                                                        <button @onclick="() => TogglePeriod(day, period)" class="btn btn-primary">X</button>
                                                        <p>Start: @period.Start.TimeOfDay</p>
                                                        <p>Einde: @period.End.TimeOfDay</p>
                                                    </div>

                                                    @foreach (var job in period.Jobs)
                                                    {
                                                        <div ondragover="event.preventDefault();" draggable="true" @ondrop="(e => HandleDrop(e, job, day, period))" style="border-color:black">
                                                            <p style="text-decoration:underline; cursor:pointer">@job.Name</p>

                                                            @if (job.User != null)
                                                            {
                                                                <p class="mb-0 mr-2">@job.User.Name</p>
                                                                @if (ToggleSchedulerPopUp)
                                                                {
                                                                    <button @onclick="() => CancelUserDropZone(job.Id)" class="btn btn-danger" style="padding: 0.25rem 0.5rem; font-size: 0.5rem; line-height: 1.5; border-radius: 0.2rem;">X</button>
                                                                }
                                                            }
                                                        </div>
                                                    }
                                                </td>
                                            }
                                        }
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            @if (ToggleSchedulerPopUp)
            {
                <div class="col-lg-3">
                    <div class="position-fixed" style="top: 100px; right: 20px;">
                        <Ezac.Roster.Web.Components.Components.SchedulerPopUp @rendermode="InteractiveServer"
                                                                              OnGetStaff="(e) => GetStaff(e)"
                                                                              Staff="Staff"
                                                                              OnCancel="CancelPopUp"
                                                                              OnDragged="(user) => HandleDragStart(user)"
                                                                              Day="selectedDay"
                                                                              DayPeriod="selectedDayPeriod"
                                                                              OnUpdate="(dayPeriod) =>ToggleDayPeriodPopUp(dayPeriod)">
                        </Ezac.Roster.Web.Components.Components.SchedulerPopUp>
                    </div>
                </div>
            }

            @if (ToggleUpdateDatePeriod)
            {
                <div class="col-lg-2">
                    <div class="position-fixed" style="top: 100px; right: 20px;">
                        <Ezac.Roster.Web.Components.Components.UpdateDayPeriodsPopUp @rendermode="InteractiveServer"
                                                                                     OnAddDayPeriod="AddDayPeriod"
                                                                                     Day="selectedDay"
                                                                                     OnDelete="(dayPeriod) => DeletePeriod(dayPeriod)"
                                                                                     OnUpdate="UpdatePeriod">
                        </Ezac.Roster.Web.Components.Components.UpdateDayPeriodsPopUp>
                    </div>
                </div>
            }
            @if (ToggleUpdateDatePeriodJobs)
            {
                <div class="col-lg-2">
                    <div class="position-fixed" style="top: 100px; right: 20px;">
                        <Ezac.Roster.Web.Components.Components.UpdateDayPeriodJobsPopUp @rendermode="InteractiveServer"
                                                                                        Day="selectedDay"
                                                                                        DayPeriod="selectedDayPeriod"
                                                                                        OnAddJob="UpdatePeriod"
                                                                                        OnDeleteJob="UpdatePeriod">
                        </Ezac.Roster.Web.Components.Components.UpdateDayPeriodJobsPopUp>
                    </div>
                </div>
            }
        </div>
    </div>
}
else
{
    <p>Gegevens worden geladen of kalender bevat geen dagen.</p>
}

<style>
    .table-hover tbody tr td:hover {
        background-color: cornflowerblue !important;
        cursor: pointer;
    }


</style>



@code {
    [Parameter]
    public string Id { get; set; }

    private ApplicationCalendar calendar;
    private List<DayPeriod> dayPeriods;
    private static List<Job> jobs;
    private static List<Permission> permissions;
    private string SelectedMonth;
    private List<string> periodNames = new List<string>();
    private bool ToggleSchedulerPopUp { get; set; }
    private UserListModel draggedMember = null;
    private Dictionary<string, UserListModel> Dropzones = new();
    private List<UserListModel> _users { get; set; } = new List<UserListModel>();
    public List<UserListModel> Staff { get; set; } = new List<UserListModel>();

    private Day selectedDay;
    private DayPeriod selectedDayPeriod;
    private bool ToggleUpdateDatePeriodJobs { get; set; }
    private bool ToggleUpdateDatePeriod { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // get the calendar
        var calendarResult = await CalendarService.GetByIdAsync(Guid.Parse(Id));

        if (calendarResult.IsSucces)
        {
            calendar = calendarResult.Value;
            calendar.Days = calendar.Days.OrderBy(day => day.Date).ToList();

            await GetUniquePeriodNames();
        }

        var usersResult = await _userService.GetUsersByCalendarIdAsync(Guid.Parse(Id));
        if (usersResult.IsSucces)
        {
            _users = usersResult.Value.Select(p => new UserListModel
                {
                    Id = p.Id,
                    Name = p.Name,
                    Permissions = p.UserPermissions,
                    Scaling = p.Scaling,
                    Preferences = p.Preferences
                }).ToList();
        }

    }

    private async void ToggleDayPeriodPopUp(DayPeriod dayPeriod)
    {
        ToggleUpdateDatePeriod = false;
        ToggleSchedulerPopUp = false;
        ToggleUpdateDatePeriodJobs = true;
        selectedDayPeriod = dayPeriod;

        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdatePeriod()
    {
        await InvokeAsync(StateHasChanged);
    }

    private async void AddDayPeriod()
    {
        var result = await DayPeriodService.AddAsync(new DayPeriodCreateRequestModel
        {
            Start = DateTime.Parse("23:00"),
            End = DateTime.Parse("02:00"),
            DayId = selectedDay.Id,
            IsOpen = true,
        });

        await InvokeAsync(StateHasChanged);
    }

    private async Task DeletePeriod(DayPeriod dayPeriod)
    {
        var result = await DayPeriodService.DeleteAsync(dayPeriod.Id);

        if (result.IsSucces)
        {
            foreach (var job in dayPeriod.Jobs)
            {
                await JobService.DeleteAsync(job.Id);
            }
        }

        await InvokeAsync(StateHasChanged);
    }

    private async void CancelUserDropZone(Guid dropzoneId)
    {
        Dropzones[dropzoneId.ToString()] = null;

        //get the job
        var result = await JobService.GetByIdAsync(dropzoneId);
        if (result.IsSucces)
        {
            var job = new JobUpdateRequestModel
            {
                Id = dropzoneId,
                Name = result.Value.Name,
                Weight = result.Value.Weight,
                User = null,
                UserId = null,
                DayPeriodId = result.Value.DayPeriodId,
                PermissionName = result.Value.PermissionName,
                Preferences = result.Value.Preferences,
            };
            //update job in db
            var updateResult = await JobService.UpdateAsync(job);
        }
        await InvokeAsync(StateHasChanged);
    }

    public Task HandleDragStart(UserListModel user)
    {
        draggedMember = user;
        return Task.CompletedTask;
    }


    private async Task HandleDrop(DragEventArgs e, Job job, Day day, DayPeriod dayPeriod)
    {
        if (draggedMember != null)
        {
            if (day.Date == selectedDay.Date && dayPeriod.Name == selectedDayPeriod.Name)
            {
                if (!dayPeriod.Jobs.Any(j => j.UserId == draggedMember.Id))
                {
                    if (draggedMember.Permissions.Any(p => p.Name == job.PermissionName))
                    {
                        if (!Dropzones.ContainsKey(job.Id.ToString()))
                        {
                            Dropzones[job.Id.ToString()] = new UserListModel();
                        }

                        Dropzones[job.Id.ToString()] = draggedMember;

                        var newJob = new JobUpdateRequestModel
                        {
                            Id = job.Id,
                            Name = job.Name,
                            Weight = job.Weight,
                            User = draggedMember,
                            UserId = draggedMember.Id,
                            DayPeriodId = job.DayPeriodId,
                            PermissionName = job.PermissionName,
                            Preferences = job.Preferences,
                        };
                        //update job in db
                        var updateResult = await JobService.UpdateAsync(newJob);
                    }
                }
            }
            await InvokeAsync(StateHasChanged);
        }
    }

    private async void TogglePopUp(Day day, DayPeriod dayPeriod)
    {
        ToggleUpdateDatePeriodJobs = false;
        ToggleUpdateDatePeriod = false;
        ToggleSchedulerPopUp = true;
        selectedDay = day;
        selectedDayPeriod = dayPeriod;

        await InvokeAsync(StateHasChanged);
    }

    private void CancelPopUp()
    {
        ToggleSchedulerPopUp = false;
    }

    private void GetStaff(ChangeEventArgs e)
    {
        if (Staff.Count > 0)
        {
            Staff.Clear();
        }

        foreach (var user in _users)
        {
            if (user.Permissions.Any(p => p.Name == e.Value?.ToString()) && (user.Preferences.Any(p => p.Available && p.DayPeriod == selectedDayPeriod) || !user.Preferences.Any(p => p.DayPeriod == selectedDayPeriod)))
            {
                Staff.Add(user);
            }
        }
    }

    private IEnumerable<DayPeriod> GetDayPeriodsForDay(Guid dayId)
    {
        // get day periods for the specific day
        return dayPeriods.Where(dp => dp.DayId == dayId);
    }

    private IEnumerable<Job> GetJobsForDayAndPeriod(Day day, DayPeriod period)
    {
        // get jobs for the specific day and period
        return day.DayPeriods
              .Where(dp => dp.Id == period.Id)
              .SelectMany(dp => dp.Jobs);
    }

    private async void ToggleDay(Day day)
    {
        ToggleSchedulerPopUp = false;
        ToggleUpdateDatePeriod = true;

        selectedDay = day;

        await InvokeAsync(StateHasChanged);
    }

    private async Task TogglePeriod(Day day, DayPeriod dayPeriod)
    {
        if (dayPeriod != null && ToggleSchedulerPopUp == true)
        {
            var toggleResult = await DayPeriodService.ToggleAsync(dayPeriod.Id);
            if (toggleResult.IsSucces)
            {
                StateHasChanged();
            }
        }
    }

    private IEnumerable<DayPeriod> GetDistinctPeriods(ICollection<Day> days)
    {
        return days.SelectMany(d => d.DayPeriods)
                   .GroupBy(p => p.Id)
                   .Select(g => g.First())
                   .ToList();
    }

    private async Task GetUniquePeriodNames()
    {
        var dayPeriods = await DayPeriodService.GetAllAsync();
        if (dayPeriods.IsSucces)
        {
            periodNames = dayPeriods.Value.Select(p => p.Name).Distinct().OrderBy(name => name).ToList();
        }
    }

    private async Task GetPermissions()
    {
        var permissionsResult = await PermissionService.GetAllAsync();
        if (permissionsResult.IsSucces)
        {
            permissions = permissionsResult.Value.ToList();
        }
    }
}

