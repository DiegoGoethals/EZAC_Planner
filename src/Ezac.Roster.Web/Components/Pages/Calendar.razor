@page "/calendar/{id}"
@rendermode InteractiveServer

@inject ICalendarService CalendarService
@inject IJobService JobService
@inject IDayService DayService
@inject IDayPeriodService DayPeriodService
@inject IPermissionsService PermissionService

<h3>Kalender voor de maand @SelectedMonth</h3>

@if (calendar != null && calendar.Days != null)
{
    <table class="table table-bordered">

        <thead>
            <tr>
                <th>Dag/Periode</th>
                @foreach (var period in periodNames)
                {
                    <th>@period</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var day in calendar.Days)
            {

                <tr>
                    <td>
                        <button @onclick="() => ToggleDay(day)" class="btn btn-primary">
                            @day.Date.ToString("ddd d/M")
                        </button>
                    </td>
                    @foreach (var period in periodNames)
                    {
                        <td>
                            <button @onclick="() => TogglePeriod(day, period)" class="btn btn-primary">
                            </button>

                            @period
                            @if (!day.IsOpen)
                            {
                                <h5>Kolom uitgeschakeld</h5>
                            }
                            else
                            {
                                if (day.DayPeriods.Any(dp => dp.Name == period && dp.Jobs.Any()))
                                {
                                    foreach (var job in day.DayPeriods.First(dp => dp.Name == period).Jobs)
                                    {
                                        <p>@job.Name</p>
                                    }
                                }
                                else
                                {
                                    <p>Geen jobs beschikbaar</p>
                                }
                            }
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Gegevens worden geladen of kalender bevat geen dagen.</p>
}



@code {
    [Parameter]
    public string Id { get; set; }

    private ApplicationCalendar calendar;
    private List<DayPeriod> dayPeriods;
    private static List<Job> jobs;
    private static List<Permission> permissions;
    private string SelectedMonth;
    private List<string> periodNames = new List<string>();


    protected override async Task OnInitializedAsync()
    {
        // get the calendar
        var calendarResult = await CalendarService.GetByIdAsync(Guid.Parse(Id));

        if (calendarResult.IsSucces)
        {
            calendar = calendarResult.Value;
            calendar.Days = calendar.Days.OrderBy(day => day.Date).ToList();

            await GetUniquePeriodNames();
        }

    }

    private IEnumerable<DayPeriod> GetDayPeriodsForDay(Guid dayId)
    {
        // get day periods for the specific day
        return dayPeriods.Where(dp => dp.DayId == dayId);
    }

    private IEnumerable<Job> GetJobsForDayAndPeriod(Day day, DayPeriod period)
    {
        // get jobs for the specific day and period
        return day.DayPeriods
              .Where(dp => dp.Id == period.Id)
              .SelectMany(dp => dp.Jobs);
    }

    private async Task ToggleDay(Day day)
    {
        var toggleResult = await DayService.ToggleAsync(day.Id);
        StateHasChanged();
    }

    private async Task TogglePeriod(Day day, string period)
    {
        var dayPeriod = day.DayPeriods.FirstOrDefault(dp => dp.Name == period);
        if (dayPeriod.IsOpen)
        {
            var toggleResult = await DayPeriodService.ToggleAsync(dayPeriod.Id);
            if (toggleResult.IsSucces)
            {
                dayPeriod.IsOpen = !dayPeriod.IsOpen;
                StateHasChanged();
            }
        }
        else
        {
            dayPeriod.IsOpen = !dayPeriod.IsOpen;
            StateHasChanged();
        }
    }

    private IEnumerable<DayPeriod> GetDistinctPeriods(ICollection<Day> days)
    {
        return days.SelectMany(d => d.DayPeriods)
                   .GroupBy(p => p.Id)
                   .Select(g => g.First())
                   .ToList();
    }

    private async Task GetUniquePeriodNames()
    {
        var dayPeriods = await DayPeriodService.GetAllAsync();
        if (dayPeriods.IsSucces)
        {
            periodNames = dayPeriods.Value.Select(p => p.Name).Distinct().OrderBy(name => name).ToList();
        }
    }

    private async Task GetPermissions()
    {
        var permissionsResult = await PermissionService.GetAllAsync();
        if (permissionsResult.IsSucces)
        {
            permissions = permissionsResult.Value.ToList();
        }
    }
}
