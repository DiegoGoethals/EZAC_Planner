@page "/members"
@rendermode InteractiveServer

@inject IUserService UserService
@inject IPermissionsService PermissionsService

@if (members != null && permissions != null)
{
	<table class="table table-bordered" style="border-color:black">
		<thead>
			<tr>
				<th>Naam</th>
				<th>Email</th>
				<th>Inschaling</th>
				@foreach (var permission in permissions)
				{
					<th>@permission.Name</th>
				}
				<th>Acties</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var member in members)
			{
				<EditableTableRow member="member" permissions="permissions" />
			}
		</tbody>
	</table>

	<form @onsubmit="CreateUser">
		<div class="form-group">
			<label for="name">Naam</label>
			<input type="text" id="name" @bind="Name" class="form-control" required/>
		</div>
		<div class="form-group">
			<label for="email">Email</label>
			<input type="email" id="email" @bind="Email" class="form-control" required/>
		</div>
		<div class="form-group">
			<label for="scale">Inschaling</label>
			<input type="number" min="0" step="0.1" id="scale" class="form-control" required @bind="Scaling">
		</div>
		@foreach (var permission in permissions)
		{
			<div class="form-group">
				<label for="@permission.Name">@permission.Name</label>
				<input type="number" min="0" max="10" id="@permission.Name" class="form-control" required @bind="PermissionValues[permission.Id]">
			</div>
		}
		<button type="submit" class="btn btn-primary">Voeg nieuw lid toe</button>
	</form>
}
else
{
	<p>Geen leden gevonden</p>
}

@code {
	private List<User> members;
	private List<Permission> permissions;

	private string Name { get; set; }
	private string Email { get; set; }
	private double Scaling { get; set; }
	private Dictionary<Guid, int> PermissionValues { get; set; } = new Dictionary<Guid, int>();

	protected async override Task OnInitializedAsync()
	{
		await LoadMembers();
		await LoadPermissions();
	}

	private async Task LoadMembers()
	{
		var result = await UserService.GetAllAsync();
		if (result.IsSucces)
		{
			members = result.Value.ToList();
		}
		else
		{
			members = new List<User>();
		}
	}

	private async Task LoadPermissions()
	{
		var permissionsResult = await PermissionsService.GetAllAsync();
		if (permissionsResult.IsSucces)
		{
			permissions = permissionsResult.Value.ToList();
			foreach (var permission in permissions)
			{
				PermissionValues[permission.Id] = 0;
			}
		}
		else
		{
			permissions = new List<Permission>();
		}
	}

	private async Task CreateUser()
	{
		var user = new UserCreateRequestModel
		{
			Name = Name,
			Email = Email,
			Scaling = Scaling,
			Jobs = new List<Job>(),
			Preferences = new List<Preference>(),
			Permissions = PermissionValues.Select(pv => new UserPermission
			{
				Id = Guid.NewGuid(),
				PermissionId = pv.Key,
				Experience = pv.Value
			}).ToList()
		};

		var result = await UserService.AddAsync(user);
		if (result.IsSucces)
		{
			await LoadMembers();
		}
	}

	private async Task HandleDeleteUser(Guid userId)
	{
		var result = await UserService.DeleteAsync(userId);
		if (result.IsSucces)
		{
			await LoadMembers();
		}
	}
}
