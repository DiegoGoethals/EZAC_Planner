@using Ezac.Roster.Domain.Entities
@using Ezac.Roster.Domain.Interfaces.Services
@using Ezac.Roster.Domain.Models

@inject IUserService _userService
@inject IPermissionsService _permissionService
@inject IJobService _jobService

@if (string.IsNullOrWhiteSpace(feedback) == false)
{
    <div class="alert alert-success" role="alert">
        @feedback
    </div>
}

<div class="container">
    <div class="row">
        <div class="col col-lg-12">
            @if (Day != null)
            {
                <h4>@Day.Date.ToString("ddd d/M")</h4>
                <h4>@DayPeriod.Name</h4>
            }
            <h6>Beschikbare/bevoegde leden</h6>
            <button @onclick="e => OnCancel.InvokeAsync()">Annuleren</button>
            <div class="mb-3">
                <select class="form-select" @onchange="e => OnGetStaff.InvokeAsync(e)">
                    <option value="">Selecteer een bevoegdheid</option>
                    @foreach (var permission in _permissions)
                    {
                        <option>@permission.Name</option>
                    }
                </select>
            </div>

            <div>
                <table class="table table-dark">
                    <thead>
                        <tr>
                            <th>Naam</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in Staff)
                        {
                            <tr class="userrow">
                                <td id="@user.Id" draggable="true" ondragover="event.preventDefault();" @ondragstart="(e => OnDragged.InvokeAsync(user))">@user.Name (@user.Scaling)</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div>
                <button @onclick="e => OnUpdate.InvokeAsync(DayPeriod)" class="btn btn-primary">Bijwerken</button>
            </div>
        </div>
    </div>
</div>


@code {
    private string feedback = string.Empty;

    [Parameter]
    public EventCallback<DayPeriod> OnUpdate { get; set; }
    private List<BaseListModel> _permissions { get; set; } = new List<BaseListModel>();
    [Parameter]
    public List<UserListModel> Staff { get; set; }
    [Parameter]
    public EventCallback<ChangeEventArgs> OnGetStaff { get; set; }
    [Parameter]
    public EventCallback OnCancel { get; set; }
    [Parameter]
    public EventCallback<UserListModel> OnDragged { get; set; }
    [Parameter]
    public Day Day { get; set; }
    [Parameter]
    public DayPeriod DayPeriod { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await RefreshData();
    }

    public async Task RefreshData()
    {
        var permissionsResult = await _permissionService.GetAllAsync();
        if (permissionsResult.IsSucces)
        {
            _permissions = permissionsResult.Value.Select(p => new BaseListModel
            {
                Id = p.Id,
                Name = p.Name,
            }).ToList();
        }
    }
}
