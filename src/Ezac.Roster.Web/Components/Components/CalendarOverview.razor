@rendermode InteractiveServer

@using Ezac.Roster.Domain.Interfaces.Services
@using Ezac.Roster.Domain.Entities
@using Ezac.Roster.Web.Components.Components
@using Ezac.Roster.Domain.Services.Models

@inject ICalendarService CalendarService

<div id="calendar-creator">
    @if (Calendar != null)
    {
        <CalendarForm Calendar="Calendar" FormHandler="FormHandler" UpdateStartDate="UpdateStartDate" UpdateEndDate="UpdateEndDate" AddExtraDay="AddExtraDay" />
        <div>
            <h3>Aangeduide data</h3>
            <ul id="date-list">
                @foreach (var day in Calendar.Days)
                {
                    if (day.IsOpen)
                    {
                        <DateItem day="@day" RemoveDay="@RemoveClosedDay" />
                    }
                }
            </ul>
        </div>
    }
    else
    {
        <p>Geen kalender gevonden.</p>
    }
</div>

@code {
    [Parameter]
    public ApplicationCalendar Calendar { get; set; }

    [Parameter]
    public Func<Task> FormHandler { get; set; }

    private void SetDays()
    {
        var allDays = Enumerable.Range(0, (Calendar.End - Calendar.Start).Days + 1)
                                .Select(offset => Calendar.Start.AddDays(offset));
        foreach (var day in allDays)
        {
            if (!Calendar.Days.Any(d => d.Date == day))
            {
                Calendar.Days.Add(new Day()
                {
                    Id = Guid.NewGuid(),
                    Date = day,
                    IsOpen = day.DayOfWeek == DayOfWeek.Saturday || day.DayOfWeek == DayOfWeek.Sunday,
                    Name = day.DayOfWeek.ToString(),
                    CalendarId = Calendar.Id,
                    DayPeriods = new List<DayPeriod>()
                });
            }
        }
        FillDayPeriods();
        Calendar.Days = Calendar.Days.Where(d => d.Date >= Calendar.Start && d.Date <= Calendar.End).OrderBy(d => d.Date).ToList();
    }

    private void FillDayPeriods()
    {
        foreach (var date in Calendar.Days)
        {
            if (date.IsOpen && date.DayPeriods.Count == 0)
            {
                date.DayPeriods = new List<DayPeriod>()
				{
					new DayPeriod
					{
						Id = Guid.NewGuid(),
						DayId = date.Id,
						Start = DateTime.Parse("08:30"),
						End = DateTime.Parse("13:00"),
						Name = "A",
						Jobs = new List<Job>(),
						Preferences = new List<Preference>()
					},
					new DayPeriod
					{
						Id = Guid.NewGuid(),
						DayId = date.Id,
						Start = DateTime.Parse("13:00"),
						End = DateTime.Parse("17:30"),
						Name = "B",
						Jobs = new List<Job>(),
						Preferences = new List<Preference>()
					},
					new DayPeriod
					{
						Id = Guid.NewGuid(),
						DayId = date.Id,
						Start = DateTime.Parse("17:30"),
						End = DateTime.Parse("23:00"),
						Name = "C",
						Jobs = new List<Job>(),
						Preferences = new List<Preference>()
					}
				};
                foreach (var period in date.DayPeriods)
                {
                    if (period.Name == "A" || period.Name == "B")
                    {
                        period.Jobs = new Job[] { new Job { Name = "Lierist" },
								   new Job { Name = "Startofficier" },
								   new Job { Name = "Instructeur" },
								   new Job { Name = "Instructeur (DDI)"} };
                    }
                    else if (period.Name == "C")
                    {
                        period.Jobs = new Job[] { new Job { Name = "Bardienst" } };
                    }
                }
            }
        }
    }

    private void UpdateStartDate(ChangeEventArgs e)
    {
        Calendar.Start = DateTime.Parse(e.Value.ToString());
        SetDays();
    }

    private void UpdateEndDate(ChangeEventArgs e)
    {
        Calendar.End = DateTime.Parse(e.Value.ToString());
        SetDays();
    }

    private void RemoveClosedDay(Day closedDay)
    {
        var dayToRemove = Calendar.Days.FirstOrDefault(day => day.Equals(closedDay));
        if (dayToRemove != null)
        {
            dayToRemove.DayPeriods.Clear();
            closedDay.DayPeriods.Clear();
            Calendar.Days.Remove(dayToRemove);
            closedDay.IsOpen = false;
            Calendar.Days.Add(closedDay);
            Calendar.Days = Calendar.Days.OrderBy(d => d.Date).ToList();
            StateHasChanged();
        }
    }

    private void AddExtraDay(DateTime dateToAdd)
    {
        if (dateToAdd < Calendar.Start || dateToAdd > Calendar.End)
        {
            return;
        }
        var day = Calendar.Days.FirstOrDefault(d => d.Date.Date == dateToAdd);
        if (!day.IsOpen)
        {
            var dayCopy = new Day()
            {
                Id = day.Id,
                Date = day.Date,
                IsOpen = true,
                Name = day.Name,
                CalendarId = day.CalendarId,
                DayPeriods = new List<DayPeriod>(),
                Preferences = new List<Preference>()
            };
            Calendar.Days.Remove(day);
            Calendar.Days.Add(dayCopy);
        }
        else
		{
			return;
		}
        FillDayPeriods();
        Calendar.Days = Calendar.Days.OrderBy(d => d.Date).ToList();
        StateHasChanged();
    }
}