@rendermode InteractiveServer

@inject ICalendarService CalendarService
@inject IDayService DayService

<div id="calendar-creator">
    @if (Calendar != null)
    {
        <CalendarForm Calendar="Calendar" FormHandler="FormHandler" UpdateStartDate="UpdateStartDate" UpdateEndDate="UpdateEndDate" AddExtraDay="AddExtraDay" />
        <div>
            <h3>Aangeduide data</h3>
            <ul id="date-list">
                @foreach (var day in Calendar.Days.OrderBy(d => d.Date))
                {
                    if (day.IsOpen)
                    {
                        <DateItem day="@day" RemoveDay="@RemoveClosedDay" />
                    }
                }
            </ul>
        </div>
    }
    else
    {
        <p>Geen kalender gevonden.</p>
    }
</div>

@code {
    [Parameter]
    public CalenderViewModel Calendar { get; set; }

    [Parameter]
    public Func<Task> FormHandler { get; set; }

    private void SetDays()
    {
        var allDays = Enumerable.Range(0, (Calendar.End - Calendar.Start).Days + 2)
                                .Select(offset => Calendar.Start.AddDays(offset));
        foreach (var day in allDays)
        {
            if (day.DayOfWeek == DayOfWeek.Saturday || day.DayOfWeek == DayOfWeek.Sunday)
            {
                if (Calendar.Days.Count() == 0)
                {
                    Calendar.Days.Add(new Day()
                    {
                        Id = Guid.NewGuid(),
                        Date = day,
                        IsOpen = true,
                        Name = day.DayOfWeek.ToString(),
                        CalendarId = Calendar.Id,
                        DayPeriods = new List<DayPeriod>()
                    });
                }
                else
                {
                    if (!Calendar.Days.Any(d => d.Date.DayOfYear == day.Date.DayOfYear))
                    {
                        Calendar.Days.Add(new Day()
                        {
                            Id = Guid.NewGuid(),
                            Date = day,
                            IsOpen = true,
                            Name = day.DayOfWeek.ToString(),
                            CalendarId = Calendar.Id,
                            DayPeriods = new List<DayPeriod>()
                        });
                    }
                }
            }
        }
        FillDayPeriods();
        Calendar.Days = Calendar.Days.Where(d => d.Date.Date >= Calendar.Start.Date && d.Date.Date <= Calendar.End.Date).OrderBy(d => d.Date).ToList();
    }

    private void FillDayPeriods()
    {
        foreach (var date in Calendar.Days)
        {
            if (date.DayPeriods.Count == 0)
            {
                date.DayPeriods = new List<DayPeriod>()
            {
                    new DayPeriod
                    {
                        Id = Guid.NewGuid(),
                        DayId = date.Id,
                        Start = DateTime.Parse("08:30"),
                        End = DateTime.Parse("13:00"),
                        Name = "A",
                        Jobs = new List<Job>(),
                        Preferences = new List<Preference>(),
                        IsOpen = date.IsOpen == true,
                    },
                    new DayPeriod
                    {
                        Id = Guid.NewGuid(),
                        DayId = date.Id,
                        Start = DateTime.Parse("13:00"),
                        End = DateTime.Parse("17:30"),
                        Name = "B",
                        Jobs = new List<Job>(),
                        Preferences = new List<Preference>(),
                        IsOpen = date.IsOpen == true,
                    },
                    new DayPeriod
                    {
                        Id = Guid.NewGuid(),
                        DayId = date.Id,
                        Start = DateTime.Parse("17:30"),
                        End = DateTime.Parse("23:00"),
                        Name = "C",
                        Jobs = new List<Job>(),
                        Preferences = new List<Preference>(),
                        IsOpen = date.IsOpen == true,
                    }
                };
                foreach (var period in date.DayPeriods)
                {
                    if (period.Name == "A" || period.Name == "B")
                    {
                        period.Jobs = new List<Job> { 
                            new Job { Name = "Lierist", Experience = 1, Weight = 5, PermissionName = "Lierist" },
                            new Job { Name = "Startofficier", Experience = 1, Weight = 5, PermissionName = "Startofficier" },
                            new Job { Name = "Instructeur", Experience = 1, Weight = 5, PermissionName = "Instructeur" },
                            new Job { Name = "Instructeur (DDI)", Experience = 1, Weight = 5, PermissionName = "Instructeur" }
                        };
                    }
                    else if (period.Name == "C")
                    {
                        period.Jobs = new List<Job> { new Job { Name = "Bardienst", Experience = 1, Weight = 5, PermissionName = "Bar" } };
                    }
                }
            }
        }
    }

    private void UpdateStartDate(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value.ToString(), out DateTime startDate) && startDate <= Calendar.End)
        {
            Calendar.Start = startDate;
            SetDays();
        }
    }

    private void UpdateEndDate(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value.ToString(), out DateTime endDate) && endDate >= Calendar.Start)
        {
            Calendar.End = endDate;
            SetDays();
        }
    }

    private async void RemoveClosedDay(Day closedDay)
    {
        if (closedDay != null)
        {
            var result = await DayService.DeleteAsync(closedDay.Id);
            if (result.IsSucces)
            {
                Calendar.Days.Remove(closedDay);
            }
        }
        StateHasChanged();
    }

    private void AddExtraDay(DateTime dateToAdd)
    {
        if (dateToAdd < Calendar.Start || dateToAdd > Calendar.End)
        {
            return;
        }

        var newDay = new Day()
        {
            Id = Guid.NewGuid(),
            Date = dateToAdd.Date,
            IsOpen = true,
            Name = dateToAdd.DayOfWeek.ToString(),
            CalendarId = Calendar.Id,
            DayPeriods = new List<DayPeriod>(),
            Preferences = new List<Preference>()
        };

        Calendar.Days.Add(newDay);

        FillDayPeriods();
        Calendar.Days = Calendar.Days.OrderBy(d => d.Date).ToList();
        StateHasChanged();
    }
}