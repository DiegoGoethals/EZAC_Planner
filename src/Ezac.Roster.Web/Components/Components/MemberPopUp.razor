@using Ezac.Roster.Domain.Models
@using Ezac.Roster.Domain.Interfaces.Services

@inject IJobService _jobService
@inject IDayPeriodService _dayPeriodService

<div class="row justify-content-center">
    <div class="col-lg-3">
        <div>
            <h5>Lid voorkeuren</h5>
            <div class="mb-3">
                <select class="form-select">
                    <option value="">Selecteer een baan</option>
                    @foreach (var job in _jobs)
                    {
                        <option>@job.Name</option>
                    }
                </select>
            </div>

            <div class="mb-3">
                <select class="form-select">
                    <option value="">Selecteer een dagdeel</option>
                    @foreach (var dayPeriod in _dayPeriods)
                    {
                        <option>@dayPeriod.Name</option>
                    }
                </select>
            </div>

            <div class="d-flex flex-row-reverse align-items-center">
                <p class="mb-0">Niet beschikbaar</p>
                <InputCheckbox class="mr-2" @bind-Value="isChecked">Niet beschikbaar</InputCheckbox>
            </div>

            <div class="mb-2">
                <button class="btn btn-primary">Cancel</button>
                <button class="btn btn-primary">Ok</button>
            </div>
        </div>
    </div>
</div>



@code {
    private List<BaseListModel> _jobs { get; set; } = new List<BaseListModel>();
    private List<BaseListModel> _dayPeriods { get; set; } = new List<BaseListModel>();
    public bool isChecked { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await RefreshData();

    }

    public async Task RefreshData()
    {
        var jobsResult = await _jobService.GetAllAsync();
        if (jobsResult.IsSucces)
        {
            _jobs = jobsResult.Value.Select(p => new BaseListModel
            {
                Id = p.Id,
                Name = p.Name,
            }).ToList();
        }

        var dayPeriodsResult = await _dayPeriodService.GetAllAsync();
        if (dayPeriodsResult.IsSucces)
        {
            _dayPeriods = dayPeriodsResult.Value.Select(p => new BaseListModel
            {
                Id = p.Id,
                Name = p.Name,
            }).DistinctBy(dp => dp.Name).OrderBy(dp => dp.Name).ToList();
        }
    }
}
