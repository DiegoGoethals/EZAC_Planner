@inject IDayPeriodService DayPeriodService
@inject IJobService JobService

@if (string.IsNullOrWhiteSpace(feedback) == false)
{
    <Feedback Message="@feedback">
    </Feedback>
}

<div class="container">
    <div class="row">
        <div class="col col-lg-8">
            <p>@Day.Date.ToString("ddd d/M")</p>

            <div>
                <div>
                    <select @onchange="HandleSelectChanged">
                        <option value="">Selecteer een dagdeel</option>
                        @foreach (var period in Day.DayPeriods.OrderBy(dp => dp.Name))
                        {
                            <option value="@period.Name">@period.Name</option>
                        }
                    </select>
                </div>
                <div>
                    <label for="startDate">Start tijd</label>
                    <input type="datetime" @bind-value="startTime">
                </div>
                <div>
                    <label for="endDate">Eind tijd</label>
                    <input type="datetime" @bind-value="endTime">
                </div>
                <button class="btn btn-primary" @onclick="UpdatePeriod">Update dagdeel</button>
                <button class="btn btn-primary" @onclick="DeletePeriod">Dagdeel verwijderen</button>
            </div>


            <div class="mb-2">
                <button class="btn btn-primary" @onclick="e => OnAddDayPeriod.InvokeAsync()">Dagdeel toevoegen</button>
            </div>
        </div>
    </div>
</div>




@code {
    [Parameter]
    public EventCallback OnAddDayPeriod { get; set; }
    [Parameter]
    public Day Day { get; set; }
    [Parameter]
    public EventCallback<DayPeriod> OnDelete { get; set; }
    [Parameter]
    public DayPeriod DayPeriod { get; set; }
    [Parameter]
    public EventCallback<DayPeriod> OnUpdate { get; set; }

    private DayPeriod selectedPeriod;
    private DateTime startTime;
    private DateTime endTime;
    private string feedback = string.Empty;

    private void HandleSelectChanged(ChangeEventArgs e)
    {
        var selectedPeriodName = e.Value.ToString();
        selectedPeriod = Day.DayPeriods.FirstOrDefault(dp => dp.Name == selectedPeriodName);
        if (selectedPeriod != null)
        {
            GetDayPeriodDetails(selectedPeriod);
        }
    }

    private void GetDayPeriodDetails(DayPeriod period)
    {
        startTime = period.Start;
        endTime = period.End;
    }

    private async Task UpdatePeriod()
    {
        if (selectedPeriod != null)
        {
            var result = await DayPeriodService.UpdateAsync(new DayPeriodUpdateRequestModel
            {
                Id = selectedPeriod.Id,
                Name = selectedPeriod.Name,
                IsOpen = selectedPeriod.IsOpen,
                Start = startTime,
                End = endTime,
            });

            await OnUpdate.InvokeAsync();
        }
        else
            feedback = "Gelieve een dagdeel te selecteren!";
        StateHasChanged();
        await Task.Delay(2000);
        feedback = string.Empty;
    }

    private async Task DeletePeriod()
    {
        if (selectedPeriod != null)
        {
            var result = await DayPeriodService.DeleteAsync(selectedPeriod.Id);

            if (result.IsSucces)
            {
                foreach (var job in selectedPeriod.Jobs)
                {
                    await JobService.DeleteAsync(job.Id);
                }
            }

            await InvokeAsync(StateHasChanged);
            await OnUpdate.InvokeAsync();
        }
        else
            feedback = "Gelieve een dagdeel te selecteren!";
            StateHasChanged();
            await Task.Delay(2000);
            feedback = string.Empty;
    }
}
