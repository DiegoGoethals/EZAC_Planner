<form @onsubmit="HandleForm">
    <div class="form-group">
        <label for="calendarName">Kalender naam</label>
        <input type="text" class="form-control" id="calendarName" placeholder="Kalender naam" required @bind-value="Calendar.Name">
    </div>
    <div class="form-group">
        <label for="startDate">Start datum</label>
        <input type="date" class="form-control" id="startDate" min="@DateTime.Now.AddDays(14).ToString("yyyy-MM-dd")" max="@Calendar.End" required value="@Calendar.Start.ToString("yyyy-MM-dd")" @onchange="UpdateStartDate">
    </div>
    <div class="form-group">
        <label for="endDate">Eind datum</label>
        <input type="date" class="form-control" id="endDate" min="@Calendar.Start" required value="@Calendar.End.ToString("yyyy-MM-dd")" @onchange="UpdateEndDate">
    </div>
    <div>
        <div class="form-group">
            <label for="extraDays">Extra dagen beschikbaar zetten</label>
            <input type="date" class="form-control" id="extraDays" @oninput="CheckDateToAdd" @bind="dateToAdd" min="@Calendar.Start.ToString("yyyy-MM-dd")" max="@Calendar.End.ToString("yyyy-MM-dd")" />
            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="HandleClick" Margin="Margin.BottomSmall">
                <MudIcon Icon="@Icons.Material.Filled.Add"></MudIcon>Voeg dag toe
            </MudButton>
        </div>

        <div class="form-group" style="margin-top: 10px;">
            <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                <MudIcon Icon="@Icons.Material.Filled.Add"></MudIcon>Kanelnder aanmaken
            </button>

        </div>
    </div>

</form>

@code {
    [Parameter]
    public CalenderViewModel Calendar { get; set; }

    [Parameter]
    public Func<Task> FormHandler { get; set; }

    [Parameter]
    public Action<ChangeEventArgs> UpdateStartDate { get; set; }

    [Parameter]
    public Action<ChangeEventArgs> UpdateEndDate { get; set; }

    [Parameter]
    public Action<DateTime> AddExtraDay { get; set; }

    private DateTime dateToAdd { get; set; }

    private bool isSubmitting = false;

    private bool isLoading = false;

    protected override void OnInitialized()
    {
        dateToAdd = DateTime.Now.AddDays(14);
    }

    private void CheckDateToAdd()
    {
        if (DateTime.TryParse(dateToAdd.ToString(), out DateTime result) && result <= Calendar.End && result >= Calendar.Start)
        {
            dateToAdd = result;
        }
        else
        {
            dateToAdd = Calendar.Start;
        }
    }

    private void HandleClick(MouseEventArgs e)
    {
        AddExtraDay(dateToAdd);
    }

    private async Task HandleForm()
    {
        try
        {
            isLoading = true;
            isSubmitting = true;

            await FormHandler();

            isSubmitting = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
            isLoading = false;
        }
    }

    private void ResetForm()
    {
        isSubmitting = false;
    }
}
